@startuml

class Lkw {
  - nr: int
  - kapaKisten: int
  - kapaGewicht: int
  - kmh: int

  + Lkw(attributes)
}

class Auftrag {
  - nr: int
  - ziel: char
  - entfernung: int
  - anzahlKisten: int
  - gewichtKisten: int
  - zeitlimitBonus: int
  - betragBonus: int
  - entlohnung: int
  - zeitlimitStrafe: int
  - betragStrafe: int

  + Auftrag(attributes)
}

class Beladungsstrategie {
  + {static} main(args): void
  - {static} readLkwsFromCSV(pathToFile): Lkw[]
  - {static} readAuftraegeFromCSV(pathToFile): Auftrag[]
}

class Population {
  - population: Individual[]
  - fitness: int[]

  + Population(size, lkws, auftraege)
  + calcFitness(lkws, auftraege)
  + getBestSolutionIndex()
  + selectParentsRoulette(numParents)
  + selectParentsBestN(numParents)
  + generateOffspring(parents, lkws, auftraege)
  + mutation(populationSubset, mutationRate, auftraege, lkws)
  + replacePopulation(offspring)
  + getFitness()
  + getPopulation()
  + printFitnessStats()

  - initPopulation(populationSize, lkws, auftraege)
  - getNHighestIndices(array, n)
  - getNLowestIndices(array, n)
}

class Individual {
  - individual: int[][]

  + Individual(individual)
  + Individual(lkws, auftraege)
  + calculateFitness(auftraege, lkws): int
  + isValid(lkws, auftraege): boolean
  + mutateSwapRow(): void
  + mutateAdd(): void
  + printStrategy(bestSolutionScore): void
  + getIndividual(): int[][]

  - createRandomIndividual(lkws, auftraege): int[][]
  - lkwHasAnotherZiel(individual, lkws, currentLkw, currentTarget, auftraege): boolean
  - calcLkwCapacityGewicht(individual, lkws, lkw, auftraege): int
  - calcLkwCapacityKisten(individual, lkws, lkw): int
}


Population o-- Individual
@enduml