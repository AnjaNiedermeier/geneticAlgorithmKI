@startuml

class Lkw {
  - nr: int
  - kapaKisten: int
  - kapaGewicht: int
  - kmh: int

  + Lkw(attributes)
}

class Auftrag {
  - nr: int
  - ziel: char
  - entfernung: int
  - anzahlKisten: int
  - gewichtKisten: int
  - zeitlimitBonus: int
  - betragBonus: int
  - entlohnung: int
  - zeitlimitStrafe: int
  - betragStrafe: int

  + Auftrag(attributes)
}

class Beladungsstrategie {
  - {static} populationSize: int
  {static} maxRounds: int
  {static} crossoverRate: double
  {static} initialMutationRate: double
  {static} finalMutationRate: double
  {static} mutationRate: double

  {static} auftraege: Auftrag[]
  {static} lkws: Lkw[]
  {static} population: Population

  + {static} main(args): void
  - {static} readLkwsFromCSV(pathToFile): Lkw[]
  - {static} readAuftraegeFromCSV(pathToFile): Auftrag[]
}

class Population {
  - population: Individual[]
  - fitness: int[]

  + Population(size, lkws, auftraege)
  - initPopulation(populationSize, lkws, auftraege): Individual[]
  + calcFitness(lkws, auftraege): void
  + getBestSolutionIndex(): int

  + selectParentsRoulette(numParents): Individual[]
  - selectParentRoulette(): int
  + selectParentsBestN(numParents): Individual[]
  - getParentsFromIndices(numParents, parentIndices): Individual[]
  
  + generateOffspring(parents, lkws, auftraege): Individual[]
  - uniformCrossover(parentA, parentB): Individual
  - verticalBandCrossover(parentA, parentB): Individual
  - horizontalBandCrossover(parentA, parentB): Individual
  - blockCrossover(parentA, parentB): Individual

  + mutation(populationSubset, mutationRate, auftraege, lkws)
  + replacePopulation(offspring)
  
  + printFitnessStats()

  - getNHighestIndices(array, n)
  - getNLowestIndices(array, n)
}

class Individual {
  - individual: int[][]

  + Individual(individual)
  + Individual(lkws, auftraege)
  + calculateFitness(auftraege, lkws): int
  + isValid(lkws, auftraege): boolean
  + mutateSwapRow(): void
  + mutateAdd(): void
  + printStrategy(bestSolutionScore): void
  + getIndividual(): int[][]

  - createRandomIndividual(lkws, auftraege): int[][]
  - lkwHasAnotherZiel(individual, lkws, currentLkw, currentTarget, auftraege): boolean
  - calcLkwCapacityGewicht(individual, lkws, lkw, auftraege): int
  - calcLkwCapacityKisten(individual, lkws, lkw): int
}

Beladungsstrategie o-- Population
Beladungsstrategie o-- Lkw
Beladungsstrategie o-- Auftrag
Population o-- Individual
@enduml